version: '3.8'

services:

  my-dev-container:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ..:/workspace
    command: sleep infinity
    ports:
      - 5100:5001
    networks:
      - devnetwork
    depends_on:
      - rabbitmq


  customer-service:
    build:
      context: ../customer-service
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5200 
      - ASPNETCORE_HTTPS_PORTS=5101
    volumes:
      - ../customer-service:/customer-service
    command: sleep infinity
    ports:
      - 5200:5002
    networks:
      - devnetwork
    depends_on:
      - rabbitmq


  credit-offer-service:
    build:
      context: ../credit-offer-service
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5300 
      - ASPNETCORE_HTTPS_PORTS=5101
    volumes:
      - ../credit-offer-service:/credit-offer-service
    command: sleep infinity
    ports:
      - 5300:5003
    networks:
      - devnetwork
    depends_on:
      - rabbitmq




  # credit-card-service:
  #   build:
  #     context: ../credit-card-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ..:/credit-card-service-workspace
  #   command: sleep infinity
  #   ports:
  #     - 5400:5000
  #     - 5301:5001
  #   networks:
  #     - devnetwork
  #    depends_on:
  #      - rabbitmq


  rabbitmq:
    image: rabbitmq:3-management  # Uses RabbitMQ with management plugin
    container_name: rabbitmq
    ports:
      - 5672:5672  # Default RabbitMQ port
      - 15672:15672  # Management interface port
    volumes:
      - ../Configs/rabbitMqScript.sh:/rabbitMqScript.sh
    # Run script to create Queues and Exchange in RabbitMQ && Keeps the container running
    command: bash -c "chmod +x /rabbitMqScript.sh && rabbitmq-server & sleep 15 && /rabbitMqScript.sh"
    networks:
      - devnetwork 
    depends_on:
      - postgres



  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - 5432:5432
    networks:
      - devnetwork


  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - devnetwork
    depends_on:
      - postgres

  
networks:
  devnetwork:
    driver: bridge
